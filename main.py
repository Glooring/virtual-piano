# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'main.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from midiutil.MidiFile import MIDIFile
from music21 import *
import pygame.midi
import pygame
import time
import os
from pygame.locals import *

import playsound
from threading import Thread
import atexit

if hasattr(QtCore.Qt, 'AA_EnableHighDpiScaling'):
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_EnableHighDpiScaling, True)

if hasattr(QtCore.Qt, 'AA_UseHighDpiPixmaps'):
    QtWidgets.QApplication.setAttribute(QtCore.Qt.AA_UseHighDpiPixmaps, True)


device_output = 0 # numarul dispozitivului in PC
device_input = 1 # numarul dispozitivului in MIDI Controller
instrument = 1 # http://www.ccarh.org/courses/253/handout/gminstruments/

def printMIDIDeviceList():
        for i in range(pygame.midi.get_count()):
            print(pygame.midi.get_device_info(i), i)

# ===================================================================================
# ===================================================================================
pygame.init()
# initize Pygame MIDI ----------------------------------------------------------
pygame.midi.init()

pygame.fastevent.init()
event_get = pygame.fastevent.get
event_post = pygame.fastevent.post

input_id = pygame.midi.get_default_input_id()

# printMIDIDeviceList()

# Set up the output device
player = pygame.midi.Output(device_output)

# Set the instrument
player.set_instrument(instrument)

# Check if the MIDI input device is available
midiInput = None
if pygame.midi.get_count() > 1:  # Assuming device 0 is the output, so input should be at least 1
    try:
        midiInput = pygame.midi.Input(device_input)
    except pygame.midi.MidiException as e:
        print(f"Warning: MIDI input device not found. Using keyboard input instead. ({str(e)})")
else:
    print("No MIDI input devices found. Using keyboard input instead.")
# ===================================================================================
# ===================================================================================

intervalAnt = 0
start = time.time()

# Declare the note_to_pitch dictionary at the class level
note_to_pitch = {
    'C3s': 'C#3', 'D3s': 'D#3', 'F3s': 'F#3', 'G3s': 'G#3', 'A3s': 'A#3',
    'C4s': 'C#4', 'D4s': 'D#4', 'F4s': 'F#4', 'G4s': 'G#4', 'A4s': 'A#4',
    'C3': 'C3', 'D3': 'D3', 'E3': 'E3', 'F3': 'F3', 'G3': 'G3', 'A3': 'A3', 'B3': 'B3',
    'C4': 'C4', 'D4': 'D4', 'E4': 'E4', 'F4': 'F4', 'G4': 'G4', 'A4': 'A4', 'B4': 'B4',
    'C5': 'C5'
}

# create your MIDI object
mf = MIDIFile(1)     # only 1 track
track = 0   # the only track

timp = 0    # start at the beginning
mf.addTrackName(track, timp, "Sample Track")
mf.addTempo(track, timp, 66)

#def whatever():
#    with open("output.mid", 'wb') as outf:
#         mf.writeFile(outf)
             
#atexit.register(whatever)

# Function to stop the loop before closing
def stop_loop():
    global going
    going = False

class Ui_MainWindow(object):
    def __init__(self):
        # Initialize recording state flag
        self.isRecording = False
        self.start_time = 0
        # Initialize the timer
        self.timer = QtCore.QTimer()
    
    def closeEvent(self, event):
        """ Ensure that all resources are properly closed when the window is closed. """
        print("Closing the application...")



        # Stop the timer
        self.timer.stop()

        # Stop any ongoing MIDI processes
        if midiInput:
            midiInput.close()

        # Stop the Pygame resources
        pygame.midi.quit()
        pygame.quit()

        # Allow the application to exit
        event.accept()
    
    def process_pygame_events(self):
        # Check if Pygame is initialized
        if pygame.get_init():
            # Get all Pygame events
            events = event_get()
            for e in events:
                if e.type == QUIT:
                    self.mw.close()  # Close the main window
                if e.type == KEYDOWN:
                    pass  # Handle key down events if needed
        else:
            # If Pygame is not initialized, stop the timer
            self.timer.stop()

        # Handle MIDI input events
        stop = time.time()
        interval = stop - start

        if midiInput and midiInput.poll():
            midi_events = midiInput.read(10)
            print(midi_events)
            print(midi_events[0][0][1])
            # Process MIDI events
            if midi_events[0][0][0] == 144:  # Note on
                pitchs = midi_events[0][0][1]
                player.note_on(midi_events[0][0][1], midi_events[0][0][2])
                mf.addNote(track, channel, pitchs, interval, 2, volume)
            if midi_events[0][0][0] == 128:  # Note off
                player.note_off(midi_events[0][0][1], midi_events[0][0][2])
    
    # MODIFIED: Toggle recording on/off when the button is pressed
    def toggle_recording(self):
        if self.startRecordingButton.isChecked():
            self.startRecordingButton.setText("Stop Recording")
            self.isRecording = True  # Set flag to start recording
            self.start_time = time.time()  # Set the start time to the current time
            
            # Reset the MIDI file for new recording
            global mf
            mf = MIDIFile(1)  # Create a new MIDIFile object to reset the recording
            mf.addTrackName(track, 0, "Sample Track")
            mf.addTempo(track, 0, 66)

            print("Recording started and previous recording cleared")
        else:
            self.startRecordingButton.setText("Start Recording")
            self.isRecording = False  # Set flag to stop recording
            print("Recording stopped")


    # MODIFIED: Method to save the MIDI file and stop recording if active
    def save_midi_file(self):
        # Stop recording if it's active
        if self.isRecording:
            self.startRecordingButton.setChecked(False)
            self.startRecordingButton.setText("Start Recording")
            self.isRecording = False  # Set flag to stop recording
            print("Recording stopped")

        # Create the recordings directory if it doesn't exist
        recordings_dir = "recordings/"
        if not os.path.exists(recordings_dir):
            os.makedirs(recordings_dir)

        # Save the MIDI file in the recordings folder
        midi_file_path = os.path.join(recordings_dir, "output.mid")
        with open(midi_file_path, 'wb') as outf:
            mf.writeFile(outf)
        print(f"MIDI file saved as '{midi_file_path}'")

        
    # Let's make function to play sound
    def play_notes(self, notePath):
        playsound.playsound(notePath, False)
        print(notePath)

    
    # MODIFIED: Record only if recording is active
    # Let's make another function to run the threads
    # MODIFIED: Correct the time interval calculation for recording
    def run_threads(self):
        self.th[self.mw.sender().objectName()] = Thread(target=self.play_notes,
        args=('notes/'+'{}.wav'.format(self.mw.sender().objectName()),))

        # Start and join the thread for playing sound
        self.th[self.mw.sender().objectName()].start()
        self.th[self.mw.sender().objectName()].join()

        # Check if recording is enabled
        if self.isRecording:
            stop = time.time()
            interval = stop - self.start_time  # Calculate the interval from the start of recording
            global intervalAnt

            intervalAnt = interval  # Update intervalAnt with the current interval
            global channel
            # Add the note to the MIDI file
            channel = 0
            volume = 100
            numeNota = self.mw.sender().objectName()

            # Get the corresponding pitch using the dictionary
            if numeNota in note_to_pitch:
                pitchs = int(pitch.Pitch(note_to_pitch[numeNota]).ps)

                # Add the note to the MIDI file with the correct interval
                mf.addNote(track, channel, pitchs, interval, 2, volume)
                print(f"Recorded note: {numeNota}, Pitch: {pitchs}, Interval: {interval}")
            else:
                print(f"Error: Unknown note {numeNota}")
        
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(471, 195)
        #MainWindow.setMinimumSize(QtCore.QSize(471, 161))
        MainWindow.setMinimumSize(QtCore.QSize(471, 240))
        # Overriding the closeEvent to handle cleanup
        MainWindow.closeEvent = self.closeEvent
        self.mw = MainWindow
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setMinimumSize(QtCore.QSize(451, 0))
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout.setContentsMargins(10, 5, 10, 0)
        self.verticalLayout.setSpacing(0)
        self.verticalLayout.setObjectName("verticalLayout")
        
        # MODIFIED: Adding buttons for recording and saving the MIDI file

        # Add start/stop recording button
        self.startRecordingButton = QtWidgets.QPushButton(self.centralwidget)
        self.startRecordingButton.setText("Start Recording")
        self.startRecordingButton.setCheckable(True)  # Makes the button toggle between start and stop
        self.verticalLayout.addWidget(self.startRecordingButton)

        # Add a button to save the MIDI file
        self.saveButton = QtWidgets.QPushButton(self.centralwidget)
        self.saveButton.setText("Save MIDI File")
        self.verticalLayout.addWidget(self.saveButton)

        # Connect buttons to their respective methods
        self.startRecordingButton.clicked.connect(self.toggle_recording)
        self.saveButton.clicked.connect(self.save_midi_file)

        # Initialize recording state flag
        self.isRecording = False  # MODIFIED: Flag for recording state
        self.start_time = 0

        
        self.widget = QtWidgets.QWidget(self.centralwidget)
        self.widget.setMinimumSize(QtCore.QSize(451, 161))
        self.widget.setObjectName("widget")
        self.C3s = QtWidgets.QPushButton(self.widget)
        self.C3s.setGeometry(QtCore.QRect(17, 0, 20, 101))
        self.C3s.setStyleSheet("#C3s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#C3s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.C3s.setText("")
        self.C3s.setObjectName("C3s")
        self.A4s = QtWidgets.QPushButton(self.widget)
        self.A4s.setGeometry(QtCore.QRect(381, 0, 20, 101))
        self.A4s.setStyleSheet("#A4s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#A4s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.A4s.setText("")
        self.A4s.setObjectName("A4s")
        self.A3 = QtWidgets.QPushButton(self.widget)
        self.A3.setGeometry(QtCore.QRect(150, 0, 31, 161))
        self.A3.setStyleSheet("#A3{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#A3:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.A3.setText("")
        self.A3.setObjectName("A3")
        self.A4 = QtWidgets.QPushButton(self.widget)
        self.A4.setGeometry(QtCore.QRect(360, 0, 31, 161))
        self.A4.setStyleSheet("#A4{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#A4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.A4.setText("")
        self.A4.setObjectName("A4")
        self.B3 = QtWidgets.QPushButton(self.widget)
        self.B3.setGeometry(QtCore.QRect(180, 0, 31, 161))
        self.B3.setStyleSheet("#B3{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#B3:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.B3.setText("")
        self.B3.setObjectName("B3")
        self.C4s = QtWidgets.QPushButton(self.widget)
        self.C4s.setGeometry(QtCore.QRect(227, 0, 20, 101))
        self.C4s.setStyleSheet("#C4s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#C4s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.C4s.setText("")
        self.C4s.setObjectName("C4s")
        self.E4 = QtWidgets.QPushButton(self.widget)
        self.E4.setGeometry(QtCore.QRect(270, 0, 31, 161))
        self.E4.setStyleSheet("#E4{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#E4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.E4.setText("")
        self.E4.setObjectName("E4")
        self.D3s = QtWidgets.QPushButton(self.widget)
        self.D3s.setGeometry(QtCore.QRect(51, 0, 20, 101))
        self.D3s.setStyleSheet("#D3s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#D3s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.D3s.setText("")
        self.D3s.setObjectName("D3s")
        self.D3 = QtWidgets.QPushButton(self.widget)
        self.D3.setGeometry(QtCore.QRect(30, 0, 31, 161))
        self.D3.setStyleSheet("#D3{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#D3:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}")
        self.D3.setText("")
        self.D3.setObjectName("D3")
        self.G4s = QtWidgets.QPushButton(self.widget)
        self.G4s.setGeometry(QtCore.QRect(349, 0, 20, 101))
        self.G4s.setStyleSheet("#G4s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#G4s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.G4s.setText("")
        self.G4s.setObjectName("G4s")
        self.E3 = QtWidgets.QPushButton(self.widget)
        self.E3.setGeometry(QtCore.QRect(60, 0, 31, 161))
        self.E3.setStyleSheet("#E3{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#E3:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.E3.setText("")
        self.E3.setObjectName("E3")
        self.C5 = QtWidgets.QPushButton(self.widget)
        self.C5.setGeometry(QtCore.QRect(420, 0, 31, 161))
        self.C5.setStyleSheet("#C5{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#C5:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.C5.setText("")
        self.C5.setObjectName("C5")
        self.G3 = QtWidgets.QPushButton(self.widget)
        self.G3.setGeometry(QtCore.QRect(120, 0, 31, 161))
        self.G3.setStyleSheet("#G3{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#G3:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}")
        self.G3.setText("")
        self.G3.setObjectName("G3")
        self.G4 = QtWidgets.QPushButton(self.widget)
        self.G4.setGeometry(QtCore.QRect(330, 0, 31, 161))
        self.G4.setStyleSheet("#G4{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#G4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}")
        self.G4.setText("")
        self.G4.setObjectName("G4")
        self.A3s = QtWidgets.QPushButton(self.widget)
        self.A3s.setGeometry(QtCore.QRect(171, 0, 20, 101))
        self.A3s.setStyleSheet("#A3s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#A3s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.A3s.setText("")
        self.A3s.setObjectName("A3s")
        self.B4 = QtWidgets.QPushButton(self.widget)
        self.B4.setGeometry(QtCore.QRect(390, 0, 31, 161))
        self.B4.setStyleSheet("#B4{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#B4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.B4.setText("")
        self.B4.setObjectName("B4")
        self.G3s = QtWidgets.QPushButton(self.widget)
        self.G3s.setGeometry(QtCore.QRect(139, 0, 20, 101))
        self.G3s.setStyleSheet("#G3s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#G3s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.G3s.setText("")
        self.G3s.setObjectName("G3s")
        self.C4 = QtWidgets.QPushButton(self.widget)
        self.C4.setGeometry(QtCore.QRect(210, 0, 31, 161))
        self.C4.setStyleSheet("#C4{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#C4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.C4.setText("")
        self.C4.setObjectName("C4")
        self.F4s = QtWidgets.QPushButton(self.widget)
        self.F4s.setGeometry(QtCore.QRect(317, 0, 20, 101))
        self.F4s.setStyleSheet("#F4s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#F4s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.F4s.setText("")
        self.F4s.setObjectName("F4s")
        self.F3 = QtWidgets.QPushButton(self.widget)
        self.F3.setGeometry(QtCore.QRect(90, 0, 31, 161))
        self.F3.setStyleSheet("#F3{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#F3:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.F3.setText("")
        self.F3.setObjectName("F3")
        self.C3 = QtWidgets.QPushButton(self.widget)
        self.C3.setGeometry(QtCore.QRect(0, 0, 31, 161))
        self.C3.setStyleSheet("#C3{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#C3:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.C3.setText("")
        self.C3.setObjectName("C3")
        self.F3s = QtWidgets.QPushButton(self.widget)
        self.F3s.setGeometry(QtCore.QRect(107, 0, 20, 101))
        self.F3s.setStyleSheet("#F3s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#F3s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.F3s.setText("")
        self.F3s.setObjectName("F3s")
        self.D4 = QtWidgets.QPushButton(self.widget)
        self.D4.setGeometry(QtCore.QRect(240, 0, 31, 161))
        self.D4.setStyleSheet("#D4{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#D4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}")
        self.D4.setText("")
        self.D4.setObjectName("D4")
        self.D4s = QtWidgets.QPushButton(self.widget)
        self.D4s.setGeometry(QtCore.QRect(261, 0, 20, 101))
        self.D4s.setStyleSheet("#D4s{\n"
"background-color: rgb(0, 0, 0);\n"
"\n"
"background-color: qlineargradient(spread:pad, x1:0.784, y1:0.0175, x2:1, y2:0, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(255, 255, 255, 255))\n"
"}\n"
"\n"
"#D4s:pressed{\n"
"background-color: rgb(0,0,0);\n"
"background-color: qlineargradient(spread:pad, x1:0.857955, y1:0.0170455, x2:1, y2:0, stop:0.125 rgba(0, 0, 0, 255), stop:0.977273 rgba(255, 255, 255, 255))\n"
"}")
        self.D4s.setText("")
        self.D4s.setObjectName("D4s")
        self.F4 = QtWidgets.QPushButton(self.widget)
        self.F4.setGeometry(QtCore.QRect(300, 0, 31, 161))
        self.F4.setStyleSheet("#F4{\n"
"background-color: rgb(242, 242, 242);\n"
"background-color: qlineargradient(spread:pad, x1:0.960545, y1:0.0962727, x2:0.795545, y2:0.119318, stop:0 rgba(0, 0, 0, 255), stop:1 rgba(250, 250, 250, 250));}\n"
"\n"
"\n"
"#F4:pressed{\n"
"background-color: rgb(250, 250, 250);\n"
"}\n"
"\n"
"")
        self.F4.setText("")
        self.F4.setObjectName("F4")
        self.C5.raise_()
        self.B4.raise_()
        self.A4.raise_()
        self.G4.raise_()
        self.F4.raise_()
        self.E4.raise_()
        self.D4.raise_()
        self.C4.raise_()
        self.B3.raise_()
        self.A3.raise_()
        self.G3.raise_()
        self.F3.raise_()
        self.E3.raise_()
        self.D3.raise_()
        self.C3.raise_()
        self.A4s.raise_()
        self.C4s.raise_()
        self.D3s.raise_()
        self.G4s.raise_()
        self.C3s.raise_()
        self.A3s.raise_()
        self.F4s.raise_()
        self.G3s.raise_()
        self.F3s.raise_()
        self.D4s.raise_()
        self.verticalLayout.addWidget(self.widget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Here we make a dict for threads called th
        
        self.th = {}
        
        # These are white keys
        # Replace all `clicked.connect(self.run_threads)` with `pressed.connect(self.run_threads)`.

        # List of white keys
        white_keys = [self.C3, self.D3, self.E3, self.F3, self.G3, self.A3, self.B3, self.C4, 
                      self.D4, self.E4, self.F4, self.G4, self.A4, self.B4, self.C5]

        # List of black keys
        black_keys = [self.C3s, self.D3s, self.F3s, self.G3s, self.A3s, 
                      self.C4s, self.D4s, self.F4s, self.G4s, self.A4s]

        # Connect all white keys to self.run_threads
        for key in white_keys:
            key.pressed.connect(self.run_threads)

        # Connect all black keys to self.run_threads
        for key in black_keys:
            key.pressed.connect(self.run_threads)
            
        # Initialize the timer after setting up the UI
        self.timer.timeout.connect(self.process_pygame_events)
        self.timer.start(10)  # Adjust the interval as needed
        """
        # These are white keys
        self.C3.pressed.connect(self.run_threads)
        self.D3.pressed.connect(self.run_threads)
        self.E3.pressed.connect(self.run_threads)
        self.F3.pressed.connect(self.run_threads)
        self.G3.pressed.connect(self.run_threads)
        self.A3.pressed.connect(self.run_threads)
        self.B3.pressed.connect(self.run_threads)
        self.C4.pressed.connect(self.run_threads)
        self.D4.pressed.connect(self.run_threads)
        self.E4.pressed.connect(self.run_threads)
        self.F4.pressed.connect(self.run_threads)
        self.G4.pressed.connect(self.run_threads)
        self.A4.pressed.connect(self.run_threads)
        self.B4.pressed.connect(self.run_threads)
        self.C5.pressed.connect(self.run_threads)

        # These are the black keys
        self.C3s.pressed.connect(self.run_threads) 
        self.D3s.pressed.connect(self.run_threads) 
        self.F3s.pressed.connect(self.run_threads) 
        self.G3s.pressed.connect(self.run_threads) 
        self.A3s.pressed.connect(self.run_threads)
        self.C4s.pressed.connect(self.run_threads) 
        self.D4s.pressed.connect(self.run_threads) 
        self.F4s.pressed.connect(self.run_threads) 
        self.G4s.pressed.connect(self.run_threads) 
        self.A4s.pressed.connect(self.run_threads)
        """



    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.C3s.setShortcut(_translate("MainWindow", "F"))
        self.A4s.setShortcut(_translate("MainWindow", "9"))
        self.A3.setShortcut(_translate("MainWindow", "Q"))
        self.A4.setShortcut(_translate("MainWindow", "I"))
        self.B3.setShortcut(_translate("MainWindow", "W"))
        self.C4s.setShortcut(_translate("MainWindow", "4"))
        self.E4.setShortcut(_translate("MainWindow", "T"))
        self.D3s.setShortcut(_translate("MainWindow", "G"))
        self.D3.setShortcut(_translate("MainWindow", "V"))
        self.G4s.setShortcut(_translate("MainWindow", "8"))
        self.E3.setShortcut(_translate("MainWindow", "B"))
        self.C5.setShortcut(_translate("MainWindow", "P"))
        self.G3.setShortcut(_translate("MainWindow", "M"))
        self.G4.setShortcut(_translate("MainWindow", "U"))
        self.A3s.setShortcut(_translate("MainWindow", "2"))
        self.B4.setShortcut(_translate("MainWindow", "O"))
        self.G3s.setShortcut(_translate("MainWindow", "K"))
        self.C4.setShortcut(_translate("MainWindow", "E"))
        self.F4s.setShortcut(_translate("MainWindow", "7"))
        self.F3.setShortcut(_translate("MainWindow", "N"))
        self.C3.setShortcut(_translate("MainWindow", "C"))
        self.F3s.setShortcut(_translate("MainWindow", "J"))
        self.D4.setShortcut(_translate("MainWindow", "R"))
        self.D4s.setShortcut(_translate("MainWindow", "5"))
        self.F4.setShortcut(_translate("MainWindow", "Y"))
        

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())